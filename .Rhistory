sRes = deviance(sum((galton$child - 1) ^ 2))
sRes = deviance(sum((galton$child - galton$parent) ^ 2))
sRes = deviance(sum((galton$child - galton$parent) ^ 2))
sRes = deviance(sum((galton$child - galton$parent) ^ 2))
galton$child
sRes = deviance(fit)
sRes <- deviance(fit)
sRes/sTot
1 - sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)
cor(galton$child, galton$parent) ^ 2
play()
fit <- lm(child ~ parent, data = galton)
fit$coefficients
coef(fit)
summary(fit)
nxt()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, data = galton)
lm(child ~ 1, data = galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(fertility ~ ., swiss)
lm(Fertility ~ ., swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertility ~ agriculture, swiss)
lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination, Education, swiss)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination + swiss$Catholic
lm(Fertility ~ . + ec, swiss)
efit <- lm(Fertility ~ . + ec, swiss)
all - efit
all - efit$coefficients
all$coefficients - efit$coefficients
summary(lm(y ~ x))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y ~ x))
dataset(mtcars)
data("mtcars")
summary(lm(mpg ~ wt, mtcars))
fit <- lm(mpg ~ wt, mtcars)
fit$coefficients
fit$fitted.values
coef(fit)
summary(fit)
head(mtcars)
summary(lm(mpg ~ wt, mtcars))
summary(lm(mpg ~ wt, mtcars))$sigma
fit <- lm(mpg ~ I(wt - mean(wt)), mtcars)
confint(fit)
fit <- lm(mpg ~ wt, mtcars)
head(mtcars)
fit <- lm(mpg ~ I(wt - 2), mtcars)
confint(fit)
fit <- lm(mpg ~ I(wt + 2), mtcars)
confint(fit)
n <- 100
n
str(n)
n = 10 * 10
str(n)
rnorm(n)
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
y <- 1 + x
y
y
x
n <- 100
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
y <- 1 + x1 + x2 + x2 + rnorm(n, sd = .1)
source('~/works/datascience/linear_models/lm1.R', echo=TRUE)
sd(x1)
sd(x2)
sd(x3)
sd(y)
n <- 100
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
noise <- rnorm(n, sd = .1)
y <- 1 + x1 + x2 + x2 + noise
sd(x3)
source('~/works/datascience/linear_models/lm1.R')
source('~/works/datascience/linear_models/lm1.R', echo=TRUE)
n <- 100
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
noise <- rnorm(n, sd = .1)
y <- 1 + x1 + x2 + x2 + noise
y
sd(y)
n <- 100
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
noise <- rnorm(n, sd = .1)
y <- 1 + x1 + x2 + x3 + noise
# Residuals
ey = resid(lm(y ~ x2 + x3))
ex = resid(lm(x ~ x2 + x3))
sum(ey * ex)/sum(ex ^ 2)
n <- 100
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
noise <- rnorm(n, sd = .1)
y <- 1 + x1 + x2 + x3 + noise
# Residuals
ey = resid(lm(y ~ x2 + x3))
ex = resid(lm(x1 ~ x2 + x3))
sum(ey * ex)/sum(ex ^ 2)
source('~/works/datascience/linear_models/lm1.R', echo=TRUE)
n <- 100
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
noise <- rnorm(n, sd = .1)
y <- 1 + x1 + x2 + x3 + noise
# Residuals
ey = resid(lm(y ~ x2 + x3))
ex = resid(lm(x1 ~ x2 + x3))
sum(ey * ex)/sum(ex ^ 2)
sum(ey * ex)/sum(ex ^ 2)
coef(lm(y ~ x1 + x2 + x3))
coef(lm(ey ~ ex - 1))
library(datasets)
data(swiss)
?swiss,
case = action
)
?swiss
summary(swiss)
str(swiss)
?require
install.packages("GGally")
if !(require(GGally)) {
install.packages("GGally")
}
if not (require(GGally)) {
install.packages("GGally")
}
require(GGally)
require(adff)
if not (require(GGally)) {
install.packages("GGally")
}
if  (!require(GGally)) {
install.packages("GGally")
}
require(GGally)
g <- ggpairs(swiss, lower = list(continuous = "smooth"), params = c(method = "loess"))
g
g <- ggpairs(swiss, lower = list(continuous = "smooth"), wrap = c(method = "loess"))
g <- ggpairs(swiss, lower = list(continuous = "smooth"), params = c(method = "loess"))
help("wrap", package = "GGally")
?ggpais
?ggpairs
g <- ggpairs(swiss, lower = list(continuous = wrap(lm, "smooth", method = "loess"))
g <- ggpairs(swiss, lower = list(continuous = wrap(lm, "smooth", method = "loess")))
g <- ggpairs(swiss, lower = list(continuous = wrap(lm, params = "smooth", method = "loess")))
g
g <- ggpairs(swiss, lower = list(continuous = wrap(lm, type = "smooth", method = "loess")))
g
?lm
g <- ggpairs(swiss, lower = list(continuous = wrap(lm, method = "loess")))
g
g <- ggpairs(swiss, lower = list(continuous = wrap("smooth"), method = "loess")))
g
g <- ggpairs(swiss, lower = list(continuous = wrap("smooth"), method = "loess"))
g
colnames(swiss)
# Coeficients
summary(lm(Fertility ~ ., data = swiss))$coeficients
summary
colnames(swiss)
# Coeficients
summary(lm(Fertility ~ ., data = swiss))$coeficients
# Coeficients
summary(lm(Fertility ~ ., data = swiss))$coeficient
# Coeficients
summary(lm(Fertility ~ ., data = swiss))
# Coeficients
summary(lm(Fertility ~ ., data = swiss))$coefficients
x <- 1:n
x2 <- x1 * .01 + runif(n, -.1, .1)
x2
x1
x
x2
lm(x2 ~ x)
ggplot(lm(x2 ~ x))
ggplot(lm(x2 ~ x))
g <- ggplot(lm(x2 ~ x))
g + geom_point(method = "smoot")
g + geom_point(method = "smooth")
g + geom_point(method = "smooth")
plot(x)
plot(x1)
plot(x2)
n <- 100
x1 <- 1:n
x2 <- x1 * .01 + runif(n, -.1, .1)
plot(x2)
plot(x1)
plot(x2)
library(swirl)
swirl(),
case = action
)
swirl()
6
dim(x = InsectSprays)
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays)
sapply(InsectSprays, FUN = function(x) x)
sapply(InsectSprays, class
)
lm(spray ~ count, data = InsectSprays)
fit <- lm(spray ~ count, data = InsectSprays)
fit <- lm(count ~ spray, data = InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[, 1]
mean(sx)
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, data = InsectSprays)
summary(nfit)$coef
relevel(InsectSprays$)
spray2 <- relevel(InsectSprays$, "C")
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray2)
fit2 <- lm(InsectSprays$count ~ spray2)
summary(fit2)$coef
mean(sC)
(fit$coef[2] - fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, data = hunger)
fit$coefficients
summary(fit)$coef
lmF <- lm(Numeric ~ Year, data = hunger[hunger$Sex == "Female"])
lmF <- lm(Numeric ~ Year, data = hunger[hunger$Sex == "Female",])
play()
lmF
nxt()
lmF <- lm(Numeric[Sex == "Female"] ~ Year[Sex == "Female"], data = hunger)
play()
lmF
nxt()
lmM <- lm(Numeric[Sex == "Male"] ~ Year[Sex == "Male"], data = hunger)
lmBoth <- lm(Numeric ~ Year + Sex, data = hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex * Year, data = hunger)
summary(lmInter)
fir <- lm(y ~ x, out2)
fit <- lm(y ~ x, out2)
plot(fit, which = 1)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which = 1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out[1,])
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1 - resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sum(resid ^ 2)/resid
sigma <- sum(2 ^ 2)/4
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- sqrt(1 - hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1 - hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which = 3)
plot(fit, which = 2)
sigma1 <- d
sigma1 <- 1
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
1
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
1
sum(dy^2)/(2*sigma^2)
plot(fit, which = 5 )
data(mpgs)
library(datasets)
data(mpg)
data(mtcars)
lm(mpg ~ cyl + weight, data = mtcars)
lm(mpg ~ cyl + wt, data = mtcars)
fit <- lm(mpg ~ cyl + wt, data = mtcars)
summary(fit)
mtcars$cyl
factor(mtcars$cyl)
mtcars$cyl <- factor(mtcars$cyl)
fit <- lm(mpg ~ cyl + wt, data = mtcars)
summary(fit)
fit2 <- lm(mpg ~ cyl, data = mtcars)
summary(fit2)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit3 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hatvalues(lm(y ~ x))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
dfbeta(lm(y ~ x))
bfbeta(hatvalues(lm(y ~ x)))
dfbeta(hatvalues(lm(y ~ x)))
hatvalues(lm(y ~ x)))
hatvalues(lm(y ~ x))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hatvalues(lm(y ~ x))
dfbeta(lm(y ~ x))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
setwd("~/works/datascience/practical_machine_learning")
training_index <- createDataPartition(segmentationOriginal$Case, p = 0.75, list = FALSE)
set.seed(125)
training_set <- segmentationOriginal[training_index,]
testing_set <- segmentationOriginal[-training_index,]
training_index <- createDataPartition(segmentationOriginal, p = 0.75, list = FALSE)
set.seed(125)
training_index <- createDataPartition(segmentationOriginal, p = 0.75, list = FALSE)
training_index <- createDataPartition(segmentationOriginal$Case, p = 0.75, list = FALSE)
set.seed(125)
training_set <- segmentationOriginal[training_index,]
testing_set <- segmentationOriginal[-training_index,]
CART <- rpart(Case ~ ., data = segmentationOriginal)
CART <- train(Case ~ ., data = segmentationOriginal, method = "rpart")
CART <- train(Case ~ ., data = training_set, method = "rpart")
predict(CART, testing_set)
summary(CART)
predict(CART, testing_set)
predict(testing_set, CART)
predict(CART, testing_set)
View(testing_set)
CART <- train(Class ~ ., data = training_set, method = "rpart")
predict(CART, data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2))
predict(CART, testing_set[ TotalIntench2 = 23,000 & FiberWidthCh1 = 10 & PerimStatusCh1=2, ])
testing_set[TotalIntench2 = 23,000 & FiberWidthCh1 = 10 & PerimStatusCh1=2, ]
testing_set[testing_set$TotalIntench2 = 23,000 & FiberWidthCh1 = 10 & PerimStatusCh1=2, ]
testing_set[(testing_set$TotalIntench2 = 23000) & FiberWidthCh1 = 10 & PerimStatusCh1=2, ]
testing_set[(testing_set$TotalIntench2 = 23000) & (FiberWidthCh1 = 10) & (PerimStatusCh1=2), ]
testing_set[(TotalIntench2 = 23000) & (FiberWidthCh1 = 10) & (PerimStatusCh1=2), ]
predict(CART, testing_set[(TotalIntench2 = 23000) & (FiberWidthCh1 = 10) & (PerimStatusCh1=2),])
predict(CART, testing_set[(TotalIntench2 == 23000) & (FiberWidthCh1 == 10) & (PerimStatusCh1 == 2),])
CART <- train(Class ~ ., data = training_set, method = "rpart")
predict(CART, testing_set[(TotalIntench2 == 23000) & (FiberWidthCh1 == 10) & (PerimStatusCh1 == 2),])
testing_set[(TotalIntench2 == 23000) & (FiberWidthCh1 == 10) & (PerimStatusCh1 == 2),]
testing_set[(TotalIntench2 == 23000) && (FiberWidthCh1 == 10) && (PerimStatusCh1 == 2),]
testing_set[(FiberWidthCh1 == 10) && (TotalIntench2 == 23000) && (PerimStatusCh1 == 2),]
testing_set[FiberWidthCh1 == 10 && (TotalIntench2 == 23000) && (PerimStatusCh1 == 2),]
testing_set[FiberWidthCh1 == 10, ]# && (TotalIntench2 == 23000) && (PerimStatusCh1 == 2),]
testing_set[FiberWidthCh1 == 10, ]# && (TotalIntench2 == 23000) && (PerimStatusCh1 == 2),]
testing_set[FiberWidthCh1 = 10, ]# && (TotalIntench2 == 23000) && (PerimStatusCh1 == 2),]
testing_set[testing_set$FiberWidthCh1 == 10, ]# && (TotalIntench2 == 23000) && (PerimStatusCh1 == 2),]
testing_set[testing_set$FiberWidthCh1 == 10 && testing_set$TotalIntench2 == 23000 && testing_set$PerimStatusCh1 == 2,]
testing_set[testing_set$TotalIntench2 == 23000|,]
testing_set[testing_set$TotalIntench2 == 23000,]
testing_set[testing_set$TotalIntench2 == 23000  && testing_set$PerimStatusCh1 == 2,]
testing_set[(testing_set$TotalIntench2 == 23000) & (testing_set$PerimStatusCh1 == 2),]
testing_set[(testing_set$FiberWidthCh1 == 10) & (testing_set$TotalIntench2 == 23000) & (testing_set$PerimStatusCh1 == 2),]
testing_set[(testing_set$FiberWidthCh1 == 10) && (testing_set$TotalIntench2 == 23000) && (testing_set$PerimStatusCh1 == 2),]
testing_set[(testing_set$FiberWidthCh1 == 10) & (testing_set$TotalIntench2 == 23000) & (testing_set$PerimStatusCh1 == 2),]
predict(CART, testing_set[(testing_set$FiberWidthCh1 == 10) & (testing_set$TotalIntench2 == 23000) & (testing_set$PerimStatusCh1 == 2),])
predict(CART, testing_set[(testing_set$FiberWidthCh1 == 10) & (testing_set$TotalIntench2 == 50000) & (testing_set$VarIntenCh4 == 100),])
testing_set[(testing_set$FiberWidthCh1 == 10),]
predict(CART, testing_set)
test_1 <- data.frame()
colnames(test_1) <- colnames(testing_set)
#TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test_1 <- data.frame(1:dim(testing)[2])
#TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test_1 <- data.frame(1:dim(testing_set)[2])
colnames(test_1) <- colnames(testing_set)
#TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test_1 <- data.frame(cols = 1:dim(testing_set)[2])
colnames(test_1) <- colnames(testing_set)
test_1
?data.frame
#TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test_1 <- data.frame(1, 1:dim(testing_set)[2])
colnames(test_1) <- colnames(testing_set)
test_1
#TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test_1 <- data.frame(x = 1:dim(testing_set)[2], y = 0)
colnames(test_1) <- colnames(testing_set)
test_1
?matrix
#TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test_1 <- data.frame(matrix(ncol = 1:dim(testing_set)[2]))
test_1
#TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test_1 <- as.data.frame(matrix(ncol = 1:dim(testing_set)[2]))
colnames(test_1) <- colnames(testing_set)
test_1
#TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test_1 <- as.data.frame(a.matrix(ncol = 1:dim(testing_set)[2]))
#TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test_1 <- as.data.frame(as.matrix(ncol = 1:dim(testing_set)[2]))
matrix(ncol = 1:dim(testing_set)[2])
#TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test_1 <- as.data.frame(matrix(ncol = dim(testing_set)[2]))
test_1
colnames(test_1) <- colnames(testing_set)
test_1
test_1$FiberWidthCh1 <- 10
test_1$TotalIntench2 <- 23000
test_1$PerimStatusCh1 <- 2
predict(CART, test_1)
predict(CART, test_1[, -Case])
predict(CART, test_1[, -Class])
CART <- train(training_set[,-Class], training_set[, Class], data = training_set, method = "rpart")
CART <- train(training_set[,-"Class"], training_set[, Class], data = training_set, method = "rpart")
CART <- train(training_set[,-Class], training_set[, Class], data = training_set, method = "rpart")
?train
CART <- train(training_set[c("FiberWidthCh1", "TotalIntench2", "PerimStatusCh1"), Class, data = training_set, method = "rpart"))
#TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test_1 <- as.data.frame(matrix(ncol = dim(testing_set)[2]))
colnames(test_1) <- colnames(testing_set)
test_1$FiberWidthCh1 <- 10
test_1$TotalIntench2 <- 23000
test_1$PerimStatusCh1 <- 2
predict(CART, test_1[, -Class])
testing_set[(testing_set$FiberWidthCh1 == 10),]
CART <- train(c("FiberWidthCh1", "TotalIntench2", "PerimStatusCh1"), Class, data = training_set, method = "rpart")
CART <- train(c(FiberWidthCh1, TotalIntench2, PerimStatusCh1), Class, data = training_set, method = "rpart")
CART <- train(FiberWidthCh1 + TotalIntench2 + PerimStatusCh1, Class, data = training_set, method = "rpart")
CART <- train(FiberWidthCh1, Class, data = training_set, method = "rpart")
CART <- train(training_set[, -Class], training_set[, Class], method = "rpart")
CART <- train(training_set[, c(1:2, 4:)], training_set[, Class], method = "rpart")
CART <- train(training_set[, -3], training_set[, Class], method = "rpart")
CART <- train(training_set[, -3], training_set$Class, method = "rpart")
#TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test_1 <- as.data.frame(matrix(ncol = dim(testing_set)[2]))
colnames(test_1) <- colnames(testing_set)
test_1$FiberWidthCh1 <- 10
test_1$TotalIntench2 <- 23000
test_1$PerimStatusCh1 <- 2
predict(CART, test_1[, -Class])
predict(CART, test_1)
predict(CART, test_1)
CART <- train(training_set[, -3], training_set$Class, method = "rpart")
training_set[, -3]
predict(CART, testing_set)
testing_set[, Class]
testing_set[, "Class"]
testing_set[(testing_set$FiberWidthCh1 == 10),]
test_1[,] <- 0
colnames(test_1) <- colnames(testing_set)
#TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test_1 <- as.data.frame(matrix(ncol = dim(testing_set)[2]))
test_1[,] <- 0
colnames(test_1) <- colnames(testing_set)
test_1$FiberWidthCh1 <- 10
test_1$TotalIntench2 <- 23000
test_1$PerimStatusCh1 <- 2
predict(CART, test_1)
#TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test_1 <- testing_set[1]
test_1[,] <- 0
#TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test_1 <- testing_set[1]
test_1$FiberWidthCh1 <- 10
test_1$TotalIntench2 <- 23000
test_1$PerimStatusCh1 <- 2
predict(CART, test_1)
test_1
#TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test_1 <- testing_set[1,]
View(test_1)
test_1$FiberWidthCh1 <- 10
test_1$TotalIntench2 <- 23000
test_1$PerimStatusCh1 <- 2
predict(CART, test_1)
test_1 <- testing_set[1,]
test_1$FiberWidthCh1 <- 10; test_1$TotalIntench2 <- 23000; test_1$PerimStatusCh1 <- 2
test_1$TotalIntench2 = 50000; test_1$FiberWidthCh1 = 10; test_1$VarIntenCh4 = 100
predict(CART, test_1)
test_1$TotalIntench2 = 57000; test_1$FiberWidthCh1 = 8; test_1$VarIntenCh4 = 100
predict(CART, test_1)
test_1$FiberWidthCh1 = 8; test_1$VarIntenCh4 = 100; test_1$PerimStatusCh1=2
predict(CART, test_1)
